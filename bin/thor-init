#!/usr/bin/env bash
# Project initialization command

source "${THOR_ROOT}/lib/core/config.sh"
source "${THOR_ROOT}/lib/core/template.sh"
source "${THOR_ROOT}/lib/core/utils.sh"

show_init_help() {
    echo "Usage: thor init [type] [name] [options] <directory>"
    echo
    echo "Initialize a new project from template"
    echo
    echo "Arguments:"
    echo "  type         Template type (react, next, vue, etc.)"
    echo "  name         Project name"
    echo "  directory    Target directory"
    echo
    echo "Options:"
    echo "  -t, --template <template>    Specify template (default: ${DEFAULT_TEMPLATE})"
    echo "  -d, --desc <description>     Project description"
    echo "  -a, --author <author>        Project author"
    echo "  -l, --license <license>      Project license"
    echo "  --git                        Initialize git repository"
    echo "  --install                    Run package manager install"
    echo "  --no-deps                    Skip dependency installation"
    echo "  -f, --force                  Overwrite existing directory"
    echo "  -y, --yes                    Skip confirmation"
    echo
    echo "Examples:"
    echo "  thor init react my-app"
    echo "  thor init next my-app --template typescript"
    echo "  thor init vue my-app -d \"My awesome project\" --git"
}

# Êî∂ÈõÜÈ°πÁõÆ‰ø°ÊÅØ
collect_project_info() {
    local name="$1"
    local description="${2:-}"
    local author="${3:-}"
    local license="${4:-MIT}"

    # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÔºå‰∫§‰∫íÂºèÊî∂ÈõÜ‰ø°ÊÅØ
    if [ -z "$description" ]; then
        read -p "Project description: " description
    fi

    if [ -z "$author" ]; then
        # Â∞ùËØï‰ªégitÈÖçÁΩÆËé∑Âèñ
        author="$(git config user.name)"
        if [ -z "$author" ]; then
            read -p "Author name: " author
        fi
    fi

    echo "name=$name"
    echo "description=$description"
    echo "author=$author"
    echo "license=$license"
}

# ÂàùÂßãÂåñgit‰ªìÂ∫ì
init_git() {
    local dir="$1"
    local template_type="$2"
    local template_name="$3"

    (cd "$dir" && {
        git init

        # Â∫îÁî®gitignoreÊ®°Êùø
        if apply_template "git" "${template_type}" "$dir"; then
            echo "‚úÖ Applied .gitignore template"
        fi

        git add .
        git commit -m "Initial commit from thor template: ${template_type}/${template_name}"
    })
}

# ÂÆâË£Ö‰æùËµñ
install_dependencies() {
    local dir="$1"

    (cd "$dir" && {
        if [ -f "package.json" ]; then
            if command -v pnpm >/dev/null 2>&1; then
                echo "üì¶ Installing dependencies with pnpm..."
                pnpm install
            elif command -v yarn >/dev/null 2>&1; then
                echo "üì¶ Installing dependencies with yarn..."
                yarn
            else
                echo "üì¶ Installing dependencies with npm..."
                npm install
            fi
        elif [ -f "composer.json" ]; then
            echo "üì¶ Installing dependencies with composer..."
            composer install
        fi
    })
}

main() {
    local type=""
    local name=""
    local directory=""
    local template="${DEFAULT_TEMPLATE}"
    local description=""
    local author=""
    local license="MIT"
    local init_git=false
    local install=false
    local force=false
    local skip_confirm=false

    # Ëß£ÊûêÂèÇÊï∞
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            show_init_help
            exit 0
            ;;
        -t | --template)
            template="$2"
            shift 2
            ;;
        -d | --desc)
            description="$2"
            shift 2
            ;;
        -a | --author)
            author="$2"
            shift 2
            ;;
        -l | --license)
            license="$2"
            shift 2
            ;;
        --git)
            init_git=true
            shift
            ;;
        --install)
            install=true
            shift
            ;;
        --no-deps)
            install=false
            shift
            ;;
        -f | --force)
            force=true
            shift
            ;;
        -y | --yes)
            skip_confirm=true
            shift
            ;;
        *)
            if [ -z "$type" ]; then
                type="$1"
            elif [ -z "$name" ]; then
                name="$1"
            elif [ -z "$directory" ]; then
                directory="$1"
            else
                echo "Error: Unexpected argument: $1" >&2
                show_init_help
                exit 1
            fi
            shift
            ;;
        esac
    done

    # È™åËØÅÂøÖË¶ÅÂèÇÊï∞
    if [ -z "$type" ] || [ -z "$name" ]; then
        echo "Error: Missing required arguments" >&2
        show_init_help
        exit 1
    fi

    # Â¶ÇÊûúÊú™ÊåáÂÆöÁõÆÂΩïÔºå‰ΩøÁî®È°πÁõÆÂêç
    if [ -z "$directory" ]; then
        directory="./$name"
    fi

    # Ê£ÄÊü•ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
    if [ -d "$directory" ] && [ "$force" != true ]; then
        echo "Error: Directory already exists: $directory" >&2
        echo "Use --force to overwrite" >&2
        exit 1
    fi

    # Êî∂ÈõÜÈ°πÁõÆ‰ø°ÊÅØ
    eval "$(collect_project_info "$name" "$description" "$author" "$license")"

    # Á°ÆËÆ§ÂàõÂª∫
    if [ "$skip_confirm" != true ]; then
        echo "About to create project with following settings:"
        echo "  Type: $type"
        echo "  Template: $template"
        echo "  Name: $name"
        echo "  Description: $description"
        echo "  Author: $author"
        echo "  License: $license"
        echo "  Directory: $directory"
        echo
        read -p "Continue? [Y/n] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]] && [[ ! -z $REPLY ]]; then
            echo "Aborted"
            exit 1
        fi
    fi

    # ÂàõÂª∫È°πÁõÆ
    if apply_template "project" "${type}/${template}" "$directory"; then
        echo "Project initialized successfully!"
        echo "Next steps:"
        echo "  cd $directory"
        echo "‚úÖ Project created successfully"

        # ÂàùÂßãÂåñgit
        if [ "$init_git" = true ]; then
            init_git "$directory" "$type" "$template"
            echo "‚úÖ Git repository initialized"
        fi

        # ÂÆâË£Ö‰æùËµñ
        if [ "$install" = true ]; then
            install_dependencies "$directory"
            echo "‚úÖ Dependencies installed"
        fi

        # ÊâìÂºÄÁºñËæëÂô®
        if [ -n "$EDITOR" ]; then
            $EDITOR "$directory"
        fi

        echo
        echo "üéâ Done! Get started with:"
        echo "  cd $directory"
    else
        echo "Failed to initialize project"
        exit 1
    fi
}

main "$@"
